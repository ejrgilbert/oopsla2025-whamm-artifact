(module
    (import "wizeng" "puti" (func $puti (param i32)))
    (import "wizeng" "puts" (func $puts (param i32 i32)))

    (global $const (mut i32) (i32.const 0))
    (global $misc (mut i32) (i32.const 0))
    (global $control (mut i32) (i32.const 0))
    (global $local (mut i32) (i32.const 0))
    (global $global (mut i32) (i32.const 0))
    (global $table (mut i32) (i32.const 0))
    (global $load (mut i32) (i32.const 0))
    (global $store (mut i32) (i32.const 0))
    (global $mem (mut i32) (i32.const 0))
    (global $arith (mut i32) (i32.const 0))
    (global $compare (mut i32) (i32.const 0))
    (global $convert (mut i32) (i32.const 0))
    (global $exn (mut i32) (i32.const 0))
    (global $gc (mut i32) (i32.const 0))
    (global $atomic (mut i32) (i32.const 0))

    (func (export "wasm:exit")
        ;; print header
        (call $puts (i32.const 90) (i32.const 20))

        ;; print compare
        (call $puts (i32.const 0) (i32.const 7)) ;; 'compare'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $compare))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print const
        (call $puts (i32.const 7) (i32.const 5)) ;; 'const'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $const))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print misc
        (call $puts (i32.const 12) (i32.const 4)) ;; 'misc'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $misc))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print control
        (call $puts (i32.const 16) (i32.const 7)) ;; 'control'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $control))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print local
        (call $puts (i32.const 23) (i32.const 5)) ;; 'local'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $local))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print global
        (call $puts (i32.const 28) (i32.const 6)) ;; 'global'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $global))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print table
        (call $puts (i32.const 34) (i32.const 5)) ;; 'table'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $table))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print load
        (call $puts (i32.const 39) (i32.const 4)) ;; 'load'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $load))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print store
        (call $puts (i32.const 43) (i32.const 5)) ;; 'store'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $store))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print mem
        (call $puts (i32.const 48) (i32.const 3)) ;; 'mem'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $mem))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print arith
        (call $puts (i32.const 51) (i32.const 5)) ;; 'arith'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $arith))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print convert
        (call $puts (i32.const 56) (i32.const 7)) ;; 'convert'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $convert))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print exn
        (call $puts (i32.const 63) (i32.const 3)) ;; 'exn'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $exn))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print gc
        (call $puts (i32.const 73) (i32.const 2)) ;; 'gc'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $gc))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print atomic
        (call $puts (i32.const 75) (i32.const 6)) ;; 'atomic'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $atomic))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'
    )

    (func (export "wasm:opcode:unreachable"))
    (func (export "wasm:opcode:nop"))
    (func (export "wasm:opcode:block"))
    (func (export "wasm:opcode:loop"))
    (func (export "wasm:opcode:if"))
    (func (export "wasm:opcode:else"))
    (func (export "wasm:opcode:try_table"))
    (func (export "wasm:opcode:throw"))
    (func (export "wasm:opcode:throw_ref"))
    (func (export "wasm:opcode:end"))
    (func (export "wasm:opcode:br"))
    (func (export "wasm:opcode:br_if"))
    (func (export "wasm:opcode:br_table"))
    (func (export "wasm:opcode:return"))
    (func (export "wasm:opcode:call"))
    (func (export "wasm:opcode:call_indirect"))
    (func (export "wasm:opcode:return_call"))
    (func (export "wasm:opcode:return_call_indirect"))
    (func (export "wasm:opcode:drop"))
    (func (export "wasm:opcode:select"))
    (func (export "wasm:opcode:typed_select"))
    (func (export "wasm:opcode:local.get"))
    (func (export "wasm:opcode:local.set"))
    (func (export "wasm:opcode:local.tee"))
    (func (export "wasm:opcode:global.get"))
    (func (export "wasm:opcode:global.set"))
    (func (export "wasm:opcode:i32.load"))
    (func (export "wasm:opcode:i64.load"))
    (func (export "wasm:opcode:f32.load"))
    (func (export "wasm:opcode:f64.load"))
    (func (export "wasm:opcode:i32.load8_s"))
    (func (export "wasm:opcode:i32.load8_u"))
    (func (export "wasm:opcode:i32.load16_s"))
    (func (export "wasm:opcode:i32.load16_u"))
    (func (export "wasm:opcode:i64.load8_s"))
    (func (export "wasm:opcode:i64.load8_u"))
    (func (export "wasm:opcode:i64.load16_s"))
    (func (export "wasm:opcode:i64.load16_u"))
    (func (export "wasm:opcode:i64.load32_s"))
    (func (export "wasm:opcode:i64.load32_u"))
    (func (export "wasm:opcode:i32.store"))
    (func (export "wasm:opcode:i64.store"))
    (func (export "wasm:opcode:f32.store"))
    (func (export "wasm:opcode:f64.store"))
    (func (export "wasm:opcode:i32.store8"))
    (func (export "wasm:opcode:i32.store16"))
    (func (export "wasm:opcode:i64.store8"))
    (func (export "wasm:opcode:i64.store16"))
    (func (export "wasm:opcode:i64.store32"))
    (func (export "wasm:opcode:memory.size"))
    (func (export "wasm:opcode:memory.grow"))
    (func (export "wasm:opcode:i32.const"))
    (func (export "wasm:opcode:i64.const"))
    (func (export "wasm:opcode:f32.const"))
    (func (export "wasm:opcode:f64.const"))
    (func (export "wasm:opcode:ref.null"))
    (func (export "wasm:opcode:ref.is_null"))
    (func (export "wasm:opcode:ref.func"))
    (func (export "wasm:opcode:ref.eq"))
    (func (export "wasm:opcode:i32.eqz"))
    (func (export "wasm:opcode:i32.eq"))
    (func (export "wasm:opcode:i32.ne"))
    (func (export "wasm:opcode:i32.lt_s"))
    (func (export "wasm:opcode:i32.lt_u"))
    (func (export "wasm:opcode:i32.gt_s"))
    (func (export "wasm:opcode:i32.gt_u"))
    (func (export "wasm:opcode:i32.le_s"))
    (func (export "wasm:opcode:i32.le_u"))
    (func (export "wasm:opcode:i32.ge_s"))
    (func (export "wasm:opcode:i32.ge_u"))
    (func (export "wasm:opcode:i64.eqz"))
    (func (export "wasm:opcode:i64.eq"))
    (func (export "wasm:opcode:i64.ne"))
    (func (export "wasm:opcode:i64.lt_s"))
    (func (export "wasm:opcode:i64.lt_u"))
    (func (export "wasm:opcode:i64.gt_s"))
    (func (export "wasm:opcode:i64.gt_u"))
    (func (export "wasm:opcode:i64.le_s"))
    (func (export "wasm:opcode:i64.le_u"))
    (func (export "wasm:opcode:i64.ge_s"))
    (func (export "wasm:opcode:i64.ge_u"))
    (func (export "wasm:opcode:f32.eq"))
    (func (export "wasm:opcode:f32.ne"))
    (func (export "wasm:opcode:f32.lt"))
    (func (export "wasm:opcode:f32.gt"))
    (func (export "wasm:opcode:f32.le"))
    (func (export "wasm:opcode:f32.ge"))
    (func (export "wasm:opcode:f64.eq"))
    (func (export "wasm:opcode:f64.ne"))
    (func (export "wasm:opcode:f64.lt"))
    (func (export "wasm:opcode:f64.gt"))
    (func (export "wasm:opcode:f64.le"))
    (func (export "wasm:opcode:f64.ge"))
    (func (export "wasm:opcode:i32.clz"))
    (func (export "wasm:opcode:i32.ctz"))
    (func (export "wasm:opcode:i32.popcnt"))
    (func (export "wasm:opcode:i32.add"))
    (func (export "wasm:opcode:i32.sub"))
    (func (export "wasm:opcode:i32.mul"))
    (func (export "wasm:opcode:i32.div_s"))
    (func (export "wasm:opcode:i32.div_u"))
    (func (export "wasm:opcode:i32.rem_s"))
    (func (export "wasm:opcode:i32.rem_u"))
    (func (export "wasm:opcode:i32.and"))
    (func (export "wasm:opcode:i32.or"))
    (func (export "wasm:opcode:i32.xor"))
    (func (export "wasm:opcode:i32.shl"))
    (func (export "wasm:opcode:i32.shr_s"))
    (func (export "wasm:opcode:i32.shr_u"))
    (func (export "wasm:opcode:i32.rotl"))
    (func (export "wasm:opcode:i32.rotr"))
    (func (export "wasm:opcode:i64.clz"))
    (func (export "wasm:opcode:i64.ctz"))
    (func (export "wasm:opcode:i64.popcnt"))
    (func (export "wasm:opcode:i64.add"))
    (func (export "wasm:opcode:i64.sub"))
    (func (export "wasm:opcode:i64.mul"))
    (func (export "wasm:opcode:i64.div_s"))
    (func (export "wasm:opcode:i64.div_u"))
    (func (export "wasm:opcode:i64.rem_s"))
    (func (export "wasm:opcode:i64.rem_u"))
    (func (export "wasm:opcode:i64.and"))
    (func (export "wasm:opcode:i64.or"))
    (func (export "wasm:opcode:i64.xor"))
    (func (export "wasm:opcode:i64.shl"))
    (func (export "wasm:opcode:i64.shr_s"))
    (func (export "wasm:opcode:i64.shr_u"))
    (func (export "wasm:opcode:i64.rotl"))
    (func (export "wasm:opcode:i64.rotr"))
    (func (export "wasm:opcode:f32.abs"))
    (func (export "wasm:opcode:f32.neg"))
    (func (export "wasm:opcode:f32.ceil"))
    (func (export "wasm:opcode:f32.floor"))
    (func (export "wasm:opcode:f32.trunc"))
    (func (export "wasm:opcode:f32.nearest"))
    (func (export "wasm:opcode:f32.sqrt"))
    (func (export "wasm:opcode:f32.add"))
    (func (export "wasm:opcode:f32.sub"))
    (func (export "wasm:opcode:f32.mul"))
    (func (export "wasm:opcode:f32.div"))
    (func (export "wasm:opcode:f32.min"))
    (func (export "wasm:opcode:f32.max"))
    (func (export "wasm:opcode:f32.copysign"))
    (func (export "wasm:opcode:f64.abs"))
    (func (export "wasm:opcode:f64.neg"))
    (func (export "wasm:opcode:f64.ceil"))
    (func (export "wasm:opcode:f64.floor"))
    (func (export "wasm:opcode:f64.trunc"))
    (func (export "wasm:opcode:f64.nearest"))
    (func (export "wasm:opcode:f64.sqrt"))
    (func (export "wasm:opcode:f64.add"))
    (func (export "wasm:opcode:f64.sub"))
    (func (export "wasm:opcode:f64.mul"))
    (func (export "wasm:opcode:f64.div"))
    (func (export "wasm:opcode:f64.min"))
    (func (export "wasm:opcode:f64.max"))
    (func (export "wasm:opcode:f64.copysign"))
    (func (export "wasm:opcode:i32.wrap_i64"))
    (func (export "wasm:opcode:i32.trunc_f32_s"))
    (func (export "wasm:opcode:i32.trunc_f32_u"))
    (func (export "wasm:opcode:i32.trunc_f64_s"))
    (func (export "wasm:opcode:i32.trunc_f64_u"))
    (func (export "wasm:opcode:i64.extend_i32_s"))
    (func (export "wasm:opcode:i64.extend_i32_u"))
    (func (export "wasm:opcode:i64.trunc_f32_s"))
    (func (export "wasm:opcode:i64.trunc_f32_u"))
    (func (export "wasm:opcode:f32.convert_i32_s"))
    (func (export "wasm:opcode:f32.convert_i32_u"))
    (func (export "wasm:opcode:f32.convert_i64_s"))
    (func (export "wasm:opcode:f32.convert_i64_u"))
    (func (export "wasm:opcode:f32.demote_f64"))
    (func (export "wasm:opcode:f64.convert_i32_s"))
    (func (export "wasm:opcode:f64.convert_i32_u"))
    (func (export "wasm:opcode:f64.convert_i64_s"))
    (func (export "wasm:opcode:f64.convert_i64_u"))
    (func (export "wasm:opcode:f64.promote_f32"))
    (func (export "wasm:opcode:i32.reinterpret_f32"))
    (func (export "wasm:opcode:i64.reinterpret_f64"))
    (func (export "wasm:opcode:f32.reinterpret_i32"))
    (func (export "wasm:opcode:f64.reinterpret_i64"))
    (func (export "wasm:opcode:i32.extend8_s"))
    (func (export "wasm:opcode:i32.extend16_s"))
    (func (export "wasm:opcode:i64.extend8_s"))
    (func (export "wasm:opcode:i64.extend16_s"))
    (func (export "wasm:opcode:i64.extend32_s"))
    (func (export "wasm:opcode:struct.new"))
    (func (export "wasm:opcode:struct.new_default"))
    (func (export "wasm:opcode:struct.get"))
    (func (export "wasm:opcode:struct.get_s"))
    (func (export "wasm:opcode:struct.get_u"))
    (func (export "wasm:opcode:struct.set"))
    (func (export "wasm:opcode:array.new"))
    (func (export "wasm:opcode:array.new_default"))
    (func (export "wasm:opcode:array.new_fixed"))
    (func (export "wasm:opcode:array.new_data"))
    (func (export "wasm:opcode:array.new_elem"))
    (func (export "wasm:opcode:array.get"))
    (func (export "wasm:opcode:array.get_s"))
    (func (export "wasm:opcode:array.get_u"))
    (func (export "wasm:opcode:array.set"))
    (func (export "wasm:opcode:array.len"))
    (func (export "wasm:opcode:array.fill"))
    (func (export "wasm:opcode:array.copy"))
    (func (export "wasm:opcode:array.init_data"))
    (func (export "wasm:opcode:array.init_elem"))
    (func (export "wasm:opcode:ref.test"))
    (func (export "wasm:opcode:ref.cast"))
    (func (export "wasm:opcode:br_on_cast"))
    (func (export "wasm:opcode:br_on_cast_fail"))
    (func (export "wasm:opcode:any.convert_extern"))
    (func (export "wasm:opcode:extern.convert_any"))
    (func (export "wasm:opcode:ref.i31"))
    (func (export "wasm:opcode:i31.get_s"))
    (func (export "wasm:opcode:i31.get_u"))
    (func (export "wasm:opcode:i32.trunc_sat_f32_s"))
    (func (export "wasm:opcode:i32.trunc_sat_f32_u"))
    (func (export "wasm:opcode:i32.trunc_sat_f64_s"))
    (func (export "wasm:opcode:i32.trunc_sat_f64_u"))
    (func (export "wasm:opcode:i64.trunc_sat_f32_s"))
    (func (export "wasm:opcode:i64.trunc_sat_f32_u"))
    (func (export "wasm:opcode:i64.trunc_sat_f64_s"))
    (func (export "wasm:opcode:i64.trunc_sat_f64_u"))
    (func (export "wasm:opcode:memory.init"))
    (func (export "wasm:opcode:memory.copy"))
    (func (export "wasm:opcode:memory.fill"))
    (func (export "wasm:opcode:data.drop"))
    (func (export "wasm:opcode:elem.drop"))
    (func (export "wasm:opcode:table.copy"))
    (func (export "wasm:opcode:table.init"))
    (func (export "wasm:opcode:table.fill"))
    (func (export "wasm:opcode:table.get"))
    (func (export "wasm:opcode:table.set"))
    (func (export "wasm:opcode:table.grow"))
    (func (export "wasm:opcode:table.size"))
    (func (export "wasm:opcode:memory.atomic.notify"))
    (func (export "wasm:opcode:memory.atomic.wait32"))
    (func (export "wasm:opcode:memory.atomic.wait64"))
    (func (export "wasm:opcode:atomic.fence"))
    (func (export "wasm:opcode:i32.atomic.load"))
    (func (export "wasm:opcode:i64.atomic.load"))
    (func (export "wasm:opcode:i32.atomic.load8_u"))
    (func (export "wasm:opcode:i32.atomic.load16_u"))
    (func (export "wasm:opcode:i64.atomic.load8_u"))
    (func (export "wasm:opcode:i64.atomic.load16_u"))
    (func (export "wasm:opcode:i64.atomic.load32_u"))
    (func (export "wasm:opcode:i32.atomic.store"))
    (func (export "wasm:opcode:i32.atomic.store8"))
    (func (export "wasm:opcode:i32.atomic.store16"))
    (func (export "wasm:opcode:i64.atomic.store"))
    (func (export "wasm:opcode:i64.atomic.store8"))
    (func (export "wasm:opcode:i64.atomic.store16"))
    (func (export "wasm:opcode:i64.atomic.store32"))
    (func (export "wasm:opcode:i32.atomic.rmw_add"))
    (func (export "wasm:opcode:i32.atomic.rmw8_add_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_add"))
    (func (export "wasm:opcode:i64.atomic.rmw8_add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_add_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_sub"))
    (func (export "wasm:opcode:i32.atomic.rmw8_sub_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_sub"))
    (func (export "wasm:opcode:i64.atomic.rmw8_sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_sub_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_and"))
    (func (export "wasm:opcode:i32.atomic.rmw8_and_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_and"))
    (func (export "wasm:opcode:i64.atomic.rmw8_and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_and_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_or"))
    (func (export "wasm:opcode:i32.atomic.rmw8_or_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_or"))
    (func (export "wasm:opcode:i64.atomic.rmw8_or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_or_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_xor"))
    (func (export "wasm:opcode:i32.atomic.rmw8_xor_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_xor"))
    (func (export "wasm:opcode:i64.atomic.rmw8_xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_xor_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_xchg"))
    (func (export "wasm:opcode:i32.atomic.rmw8_xchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_xchg"))
    (func (export "wasm:opcode:i64.atomic.rmw8_xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_xchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw_cmpxchg"))
    (func (export "wasm:opcode:i32.atomic.rmw8_cmpxchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16_cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw_cmpxchg"))
    (func (export "wasm:opcode:i64.atomic.rmw8_cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16_cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32_cmpxchg_u"))
    (func (export "wasm:opcode:call_ref"))
    (func (export "wasm:opcode:return_call_ref"))
    (func (export "wasm:opcode:ref.as_non_null"))
    (func (export "wasm:opcode:br_on_null"))
    (func (export "wasm:opcode:br_on_non_null"))

    (memory (;0;) (export "memory") 1)
    (data (;0;) (i32.const 0) "compare")
    (data (;1;) (i32.const 7) "const")
    (data (;2;) (i32.const 12) "misc")
    (data (;3;) (i32.const 16) "control")
    (data (;4;) (i32.const 23) "local")
    (data (;5;) (i32.const 28) "global")
    (data (;6;) (i32.const 34) "table")
    (data (;7;) (i32.const 39) "load")
    (data (;8;) (i32.const 43) "store")
    (data (;9;) (i32.const 48) "mem")
    (data (;10;) (i32.const 51) "arith")
    (data (;11;) (i32.const 56) "convert")
    (data (;12;) (i32.const 63) "exn")
    (data (;13;) (i32.const 66) "simd")
    (data (;14;) (i32.const 70) "ref")
    (data (;15;) (i32.const 73) "gc")
    (data (;16;) (i32.const 75) "atomic")
    (data (;17;) (i32.const 81) "memory")
    (data (;18;) (i32.const 87) ": ")
    (data (;19;) (i32.const 89) "\0a")
    (data (;20;) (i32.const 90) "\0a===== FLUSH =====\0a")
)

(module
  (import "mem" "read" (func $read (param i32)))
  (import "mem" "write" (func $write (param i32)))
  (import "mem" "report" (func $report))

  (func (export "wasm:opcode:i32.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:f32.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:f64.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.load8_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.load8_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.load16_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.load16_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load8_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load8_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load16_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load16_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load32_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.load32_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))

  (func (export "wasm:opcode:v128.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_8x8_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_8x8_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_16x4_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_16x4_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_32x2_s(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_32x2_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_8_splat(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_16_splat(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_32_splat(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_64_splat(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_8_lane(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_16_lane(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_32_lane(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_64_lane(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_32_zero(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.load_64_zero(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))

  (func (export "wasm:opcode:i32.atomic.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.load(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.atomic.load8_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.atomic.load16_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.load8_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.load16_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.load32_u(arg0, offset)") (param $arg0 i32) (param $offset i64) (call $read (i32.add (local.get $arg0) (i32.wrap_i64 (local.get $offset)))))

  (func (export "wasm:opcode:i32.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:f32.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:f64.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.store8(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.store8(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.store16(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.store16(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.store32(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  
  (func (export "wasm:opcode:v128.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.store_8_lane(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.store_16_lane(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.store_32_lane(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:v128.store_64_lane(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))

  (func (export "wasm:opcode:i32.atomic.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.store(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.atomic.store8(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.store8(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i32.atomic.store16(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.store16(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  (func (export "wasm:opcode:i64.atomic.store32(arg1, offset)") (param $arg1 i32) (param $offset i64) (call $write (i32.add (local.get $arg1) (i32.wrap_i64 (local.get $offset)))))
  
  (func (export "wasm:exit")
    call $report
  )
)

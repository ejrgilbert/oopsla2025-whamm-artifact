;; === Whamm Hotness Monitor ===
;; Instrument EVERY location in the application and track each
;; time it is executed dynamically with an in-memory counter.

;; --> Output format: <fid>, pc=<pc>, [<counter>]

(module
    (import "wizeng" "puti" (func $puti (param i32)))
    (import "wizeng" "puts" (func $puts (param i32 i32)))

    (memory (export "mem") 2)   ;; no expansion checks
    (global $icount (mut i32) (i32.const 0))

    (data (i32.const 0) "\nicount=")

    (func $count_probe
        (global.set $icount (i32.add (global.get $icount) (i32.const 1)))
    )
    (func $flush (export "wasm:exit")
        (call $puts (i32.const 0) (i32.const 8))
        (call $puti (global.get $icount))
        (call $puts (i32.const 0) (i32.const 1))
        (call $puts (i32.const 0) (i32.const 1))
    )
    (func (export "wasm:opcode:unreachable"))
    (func (export "wasm:opcode:nop"))
    (func (export "wasm:opcode:block"))
    (func (export "wasm:opcode:loop"))
    (func (export "wasm:opcode:if"))
    (func (export "wasm:opcode:else"))
    (func (export "wasm:opcode:try"))
    (func (export "wasm:opcode:catch"))
    (func (export "wasm:opcode:throw"))
    (func (export "wasm:opcode:rethrow"))
    (func (export "wasm:opcode:throw_ref"))
    (func (export "wasm:opcode:end"))
    (func (export "wasm:opcode:br"))
    (func (export "wasm:opcode:br_if"))
    (func (export "wasm:opcode:br_table"))
    (func (export "wasm:opcode:return"))
    (func (export "wasm:opcode:call"))
    (func (export "wasm:opcode:call_indirect"))
    (func (export "wasm:opcode:return_call"))
    (func (export "wasm:opcode:return_call_indirect"))
    (func (export "wasm:opcode:call_ref"))
    (func (export "wasm:opcode:return_call_ref"))
    (func (export "wasm:opcode:delegate"))
    (func (export "wasm:opcode:catch_all"))
    (func (export "wasm:opcode:drop"))
    (func (export "wasm:opcode:select"))
    (func (export "wasm:opcode:try_table"))
    (func (export "wasm:opcode:local.get"))
    (func (export "wasm:opcode:local.set"))
    (func (export "wasm:opcode:local.tee"))
    (func (export "wasm:opcode:global.get"))
    (func (export "wasm:opcode:global.set"))
    (func (export "wasm:opcode:table.get"))
    (func (export "wasm:opcode:table.set"))
    (func (export "wasm:opcode:i32.load"))
    (func (export "wasm:opcode:i64.load"))
    (func (export "wasm:opcode:f32.load"))
    (func (export "wasm:opcode:f64.load"))
    (func (export "wasm:opcode:i32.load8_s"))
    (func (export "wasm:opcode:i32.load8_u"))
    (func (export "wasm:opcode:i32.load16_s"))
    (func (export "wasm:opcode:i32.load16_u"))
    (func (export "wasm:opcode:i64.load8_s"))
    (func (export "wasm:opcode:i64.load8_u"))
    (func (export "wasm:opcode:i64.load16_s"))
    (func (export "wasm:opcode:i64.load16_u"))
    (func (export "wasm:opcode:i64.load32_s"))
    (func (export "wasm:opcode:i64.load32_u"))
    (func (export "wasm:opcode:i32.store"))
    (func (export "wasm:opcode:i64.store"))
    (func (export "wasm:opcode:f32.store"))
    (func (export "wasm:opcode:f64.store"))
    (func (export "wasm:opcode:i32.store8"))
    (func (export "wasm:opcode:i32.store16"))
    (func (export "wasm:opcode:i64.store8"))
    (func (export "wasm:opcode:i64.store16"))
    (func (export "wasm:opcode:i64.store32"))
    (func (export "wasm:opcode:memory.size"))
    (func (export "wasm:opcode:memory.grow"))
    (func (export "wasm:opcode:i32.const"))
    (func (export "wasm:opcode:i64.const"))
    (func (export "wasm:opcode:f32.const"))
    (func (export "wasm:opcode:f64.const"))
    (func (export "wasm:opcode:i32.eqz"))
    (func (export "wasm:opcode:i32.eq"))
    (func (export "wasm:opcode:i32.ne"))
    (func (export "wasm:opcode:i32.lt_s"))
    (func (export "wasm:opcode:i32.lt_u"))
    (func (export "wasm:opcode:i32.gt_s"))
    (func (export "wasm:opcode:i32.gt_u"))
    (func (export "wasm:opcode:i32.le_s"))
    (func (export "wasm:opcode:i32.le_u"))
    (func (export "wasm:opcode:i32.ge_s"))
    (func (export "wasm:opcode:i32.ge_u"))
    (func (export "wasm:opcode:i64.eqz"))
    (func (export "wasm:opcode:i64.eq"))
    (func (export "wasm:opcode:i64.ne"))
    (func (export "wasm:opcode:i64.lt_s"))
    (func (export "wasm:opcode:i64.lt_u"))
    (func (export "wasm:opcode:i64.gt_s"))
    (func (export "wasm:opcode:i64.gt_u"))
    (func (export "wasm:opcode:i64.le_s"))
    (func (export "wasm:opcode:i64.le_u"))
    (func (export "wasm:opcode:i64.ge_s"))
    (func (export "wasm:opcode:i64.ge_u"))
    (func (export "wasm:opcode:f32.eq"))
    (func (export "wasm:opcode:f32.ne"))
    (func (export "wasm:opcode:f32.lt"))
    (func (export "wasm:opcode:f32.gt"))
    (func (export "wasm:opcode:f32.le"))
    (func (export "wasm:opcode:f32.ge"))
    (func (export "wasm:opcode:f64.eq"))
    (func (export "wasm:opcode:f64.ne"))
    (func (export "wasm:opcode:f64.lt"))
    (func (export "wasm:opcode:f64.gt"))
    (func (export "wasm:opcode:f64.le"))
    (func (export "wasm:opcode:f64.ge"))
    (func (export "wasm:opcode:i32.clz"))
    (func (export "wasm:opcode:i32.ctz"))
    (func (export "wasm:opcode:i32.popcnt"))
    (func (export "wasm:opcode:i32.add"))
    (func (export "wasm:opcode:i32.sub"))
    (func (export "wasm:opcode:i32.mul"))
    (func (export "wasm:opcode:i32.div_s"))
    (func (export "wasm:opcode:i32.div_u"))
    (func (export "wasm:opcode:i32.rem_s"))
    (func (export "wasm:opcode:i32.rem_u"))
    (func (export "wasm:opcode:i32.and"))
    (func (export "wasm:opcode:i32.or"))
    (func (export "wasm:opcode:i32.xor"))
    (func (export "wasm:opcode:i32.shl"))
    (func (export "wasm:opcode:i32.shr_s"))
    (func (export "wasm:opcode:i32.shr_u"))
    (func (export "wasm:opcode:i32.rotl"))
    (func (export "wasm:opcode:i32.rotr"))
    (func (export "wasm:opcode:i64.clz"))
    (func (export "wasm:opcode:i64.ctz"))
    (func (export "wasm:opcode:i64.popcnt"))
    (func (export "wasm:opcode:i64.add"))
    (func (export "wasm:opcode:i64.sub"))
    (func (export "wasm:opcode:i64.mul"))
    (func (export "wasm:opcode:i64.div_s"))
    (func (export "wasm:opcode:i64.div_u"))
    (func (export "wasm:opcode:i64.rem_s"))
    (func (export "wasm:opcode:i64.rem_u"))
    (func (export "wasm:opcode:i64.and"))
    (func (export "wasm:opcode:i64.or"))
    (func (export "wasm:opcode:i64.xor"))
    (func (export "wasm:opcode:i64.shl"))
    (func (export "wasm:opcode:i64.shr_s"))
    (func (export "wasm:opcode:i64.shr_u"))
    (func (export "wasm:opcode:i64.rotl"))
    (func (export "wasm:opcode:i64.rotr"))
    (func (export "wasm:opcode:f32.abs"))
    (func (export "wasm:opcode:f32.neg"))
    (func (export "wasm:opcode:f32.ceil"))
    (func (export "wasm:opcode:f32.floor"))
    (func (export "wasm:opcode:f32.trunc"))
    (func (export "wasm:opcode:f32.nearest"))
    (func (export "wasm:opcode:f32.sqrt"))
    (func (export "wasm:opcode:f32.add"))
    (func (export "wasm:opcode:f32.sub"))
    (func (export "wasm:opcode:f32.mul"))
    (func (export "wasm:opcode:f32.div"))
    (func (export "wasm:opcode:f32.min"))
    (func (export "wasm:opcode:f32.max"))
    (func (export "wasm:opcode:f32.copysign"))
    (func (export "wasm:opcode:f64.abs"))
    (func (export "wasm:opcode:f64.neg"))
    (func (export "wasm:opcode:f64.ceil"))
    (func (export "wasm:opcode:f64.floor"))
    (func (export "wasm:opcode:f64.trunc"))
    (func (export "wasm:opcode:f64.nearest"))
    (func (export "wasm:opcode:f64.sqrt"))
    (func (export "wasm:opcode:f64.add"))
    (func (export "wasm:opcode:f64.sub"))
    (func (export "wasm:opcode:f64.mul"))
    (func (export "wasm:opcode:f64.div"))
    (func (export "wasm:opcode:f64.min"))
    (func (export "wasm:opcode:f64.max"))
    (func (export "wasm:opcode:f64.copysign"))
    (func (export "wasm:opcode:i32.wrap_i64"))
    (func (export "wasm:opcode:i32.trunc_f32_s"))
    (func (export "wasm:opcode:i32.trunc_f32_u"))
    (func (export "wasm:opcode:i32.trunc_f64_s"))
    (func (export "wasm:opcode:i32.trunc_f64_u"))
    (func (export "wasm:opcode:i64.extend_i32_s"))
    (func (export "wasm:opcode:i64.extend_i32_u"))
    (func (export "wasm:opcode:i64.trunc_f32_s"))
    (func (export "wasm:opcode:i64.trunc_f32_u"))
    (func (export "wasm:opcode:i64.trunc_f64_s"))
    (func (export "wasm:opcode:i64.trunc_f64_u"))
    (func (export "wasm:opcode:f32.convert_i32_s"))
    (func (export "wasm:opcode:f32.convert_i32_u"))
    (func (export "wasm:opcode:f32.convert_i64_s"))
    (func (export "wasm:opcode:f32.convert_i64_u"))
    (func (export "wasm:opcode:f32.demote_f64"))
    (func (export "wasm:opcode:f64.convert_i32_s"))
    (func (export "wasm:opcode:f64.convert_i32_u"))
    (func (export "wasm:opcode:f64.convert_i64_s"))
    (func (export "wasm:opcode:f64.convert_i64_u"))
    (func (export "wasm:opcode:f64.promote_f32"))
    (func (export "wasm:opcode:i32.reinterpret_f32"))
    (func (export "wasm:opcode:i64.reinterpret_f64"))
    (func (export "wasm:opcode:f32.reinterpret_i32"))
    (func (export "wasm:opcode:f64.reinterpret_i64"))
    (func (export "wasm:opcode:i32.extend8_s"))
    (func (export "wasm:opcode:i32.extend16_s"))
    (func (export "wasm:opcode:i64.extend8_s"))
    (func (export "wasm:opcode:i64.extend16_s"))
    (func (export "wasm:opcode:i64.extend32_s"))
    (func (export "wasm:opcode:ref.null"))
    (func (export "wasm:opcode:ref.is_null"))
    (func (export "wasm:opcode:ref.func"))
    (func (export "wasm:opcode:ref.eq"))
    (func (export "wasm:opcode:ref.as_non_null"))
    (func (export "wasm:opcode:br_on_null"))
    (func (export "wasm:opcode:br_on_non_null"))
    (func (export "wasm:opcode:struct.new"))
    (func (export "wasm:opcode:struct.new_default"))
    (func (export "wasm:opcode:struct.get"))
    (func (export "wasm:opcode:struct.get_s"))
    (func (export "wasm:opcode:struct.get_u"))
    (func (export "wasm:opcode:struct.set"))
    (func (export "wasm:opcode:array.new"))
    (func (export "wasm:opcode:array.new_default"))
    (func (export "wasm:opcode:array.new_fixed"))
    (func (export "wasm:opcode:array.new_data"))
    (func (export "wasm:opcode:array.new_elem"))
    (func (export "wasm:opcode:array.get"))
    (func (export "wasm:opcode:array.get_s"))
    (func (export "wasm:opcode:array.get_u"))
    (func (export "wasm:opcode:array.set"))
    (func (export "wasm:opcode:array.len"))
    (func (export "wasm:opcode:array.fill"))
    (func (export "wasm:opcode:array.copy"))
    (func (export "wasm:opcode:array.init_data"))
    (func (export "wasm:opcode:array.init_elem"))
    (func (export "wasm:opcode:ref.test"))
    (func (export "wasm:opcode:ref.test null"))
    (func (export "wasm:opcode:ref.cast"))
    (func (export "wasm:opcode:ref.cast null"))
    (func (export "wasm:opcode:br_on_cast"))
    (func (export "wasm:opcode:br_on_cast_fail"))
    (func (export "wasm:opcode:any.convert_extern"))
    (func (export "wasm:opcode:extern.convert_any"))
    (func (export "wasm:opcode:ref.i31"))
    (func (export "wasm:opcode:i31.get_s"))
    (func (export "wasm:opcode:i31.get_u"))
    (func (export "wasm:opcode:i32.trunc_sat_f32_s"))
    (func (export "wasm:opcode:i32.trunc_sat_f32_u"))
    (func (export "wasm:opcode:i32.trunc_sat_f64_s"))
    (func (export "wasm:opcode:i32.trunc_sat_f64_u"))
    (func (export "wasm:opcode:i64.trunc_sat_f32_s"))
    (func (export "wasm:opcode:i64.trunc_sat_f32_u"))
    (func (export "wasm:opcode:i64.trunc_sat_f64_s"))
    (func (export "wasm:opcode:i64.trunc_sat_f64_u"))
    (func (export "wasm:opcode:memory.init"))
    (func (export "wasm:opcode:data.drop"))
    (func (export "wasm:opcode:memory.copy"))
    (func (export "wasm:opcode:memory.fill"))
    (func (export "wasm:opcode:table.init"))
    (func (export "wasm:opcode:elem.drop"))
    (func (export "wasm:opcode:table.copy"))
    (func (export "wasm:opcode:table.grow"))
    (func (export "wasm:opcode:table.size"))
    (func (export "wasm:opcode:table.fill"))
    (func (export "wasm:opcode:v128.load"))
    (func (export "wasm:opcode:v128.load_8x8_s"))
    (func (export "wasm:opcode:v128.load_8x8_u"))
    (func (export "wasm:opcode:v128.load_16x4_s"))
    (func (export "wasm:opcode:v128.load_16x4_u"))
    (func (export "wasm:opcode:v128.load_32x2_s"))
    (func (export "wasm:opcode:v128.load_32x2_u"))
    (func (export "wasm:opcode:v128.load_8_splat"))
    (func (export "wasm:opcode:v128.load_16_splat"))
    (func (export "wasm:opcode:v128.load_32_splat"))
    (func (export "wasm:opcode:v128.load_64_splat"))
    (func (export "wasm:opcode:v128.load_32_zero"))
    (func (export "wasm:opcode:v128.load_64_zero"))
    (func (export "wasm:opcode:v128.store"))
    (func (export "wasm:opcode:v128.load_8_lane"))
    (func (export "wasm:opcode:v128.load_16_lane"))
    (func (export "wasm:opcode:v128.load_32_lane"))
    (func (export "wasm:opcode:v128.load_64_lane"))
    (func (export "wasm:opcode:v128.store_8_lane"))
    (func (export "wasm:opcode:v128.store_16_lane"))
    (func (export "wasm:opcode:v128.store_32_lane"))
    (func (export "wasm:opcode:v128.store_64_lane"))
    (func (export "wasm:opcode:v128.const"))
    (func (export "wasm:opcode:i8x16.shuffle"))
    (func (export "wasm:opcode:i8x16.extractlane_s"))
    (func (export "wasm:opcode:i8x16.extractlane_u"))
    (func (export "wasm:opcode:i8x16.replacelane"))
    (func (export "wasm:opcode:i16x8.extractlane_s"))
    (func (export "wasm:opcode:i16x8.extractlane_u"))
    (func (export "wasm:opcode:i16x8.replacelane"))
    (func (export "wasm:opcode:i32x4.extractlane"))
    (func (export "wasm:opcode:i32x4.replacelane"))
    (func (export "wasm:opcode:i64x2.extractlane"))
    (func (export "wasm:opcode:i64x2.replacelane"))
    (func (export "wasm:opcode:f32x4.extractlane"))
    (func (export "wasm:opcode:f32x4.replacelane"))
    (func (export "wasm:opcode:f64x2.extractlane"))
    (func (export "wasm:opcode:f64x2.replacelane"))
    (func (export "wasm:opcode:i8x16.swizzle"))
    (func (export "wasm:opcode:i8x16.splat"))
    (func (export "wasm:opcode:i16x8.splat"))
    (func (export "wasm:opcode:i32x4.splat"))
    (func (export "wasm:opcode:i64x2.splat"))
    (func (export "wasm:opcode:f32x4.splat"))
    (func (export "wasm:opcode:f64x2.splat"))
    (func (export "wasm:opcode:i8x16.eq"))
    (func (export "wasm:opcode:i8x16.ne"))
    (func (export "wasm:opcode:i8x16.lt_s"))
    (func (export "wasm:opcode:i8x16.lt_u"))
    (func (export "wasm:opcode:i8x16.gt_s"))
    (func (export "wasm:opcode:i8x16.gt_u"))
    (func (export "wasm:opcode:i8x16.le_s"))
    (func (export "wasm:opcode:i8x16.le_u"))
    (func (export "wasm:opcode:i8x16.ge_s"))
    (func (export "wasm:opcode:i8x16.ge_u"))
    (func (export "wasm:opcode:i16x8.eq"))
    (func (export "wasm:opcode:i16x8.ne"))
    (func (export "wasm:opcode:i16x8.lt_s"))
    (func (export "wasm:opcode:i16x8.lt_u"))
    (func (export "wasm:opcode:i16x8.gt_s"))
    (func (export "wasm:opcode:i16x8.gt_u"))
    (func (export "wasm:opcode:i16x8.le_s"))
    (func (export "wasm:opcode:i16x8.le_u"))
    (func (export "wasm:opcode:i16x8.ge_s"))
    (func (export "wasm:opcode:i16x8.ge_u"))
    (func (export "wasm:opcode:i32x4.eq"))
    (func (export "wasm:opcode:i32x4.ne"))
    (func (export "wasm:opcode:i32x4.lt_s"))
    (func (export "wasm:opcode:i32x4.lt_u"))
    (func (export "wasm:opcode:i32x4.gt_s"))
    (func (export "wasm:opcode:i32x4.gt_u"))
    (func (export "wasm:opcode:i32x4.le_s"))
    (func (export "wasm:opcode:i32x4.le_u"))
    (func (export "wasm:opcode:i32x4.ge_s"))
    (func (export "wasm:opcode:i32x4.ge_u"))
    (func (export "wasm:opcode:i64x2.eq"))
    (func (export "wasm:opcode:i64x2.ne"))
    (func (export "wasm:opcode:i64x2.lt_s"))
    (func (export "wasm:opcode:i64x2.gt_s"))
    (func (export "wasm:opcode:i64x2.le_s"))
    (func (export "wasm:opcode:i64x2.ge_s"))
    (func (export "wasm:opcode:f32x4.eq"))
    (func (export "wasm:opcode:f32x4.ne"))
    (func (export "wasm:opcode:f32x4.lt"))
    (func (export "wasm:opcode:f32x4.gt"))
    (func (export "wasm:opcode:f32x4.le"))
    (func (export "wasm:opcode:f32x4.ge"))
    (func (export "wasm:opcode:f64x2.eq"))
    (func (export "wasm:opcode:f64x2.ne"))
    (func (export "wasm:opcode:f64x2.lt"))
    (func (export "wasm:opcode:f64x2.gt"))
    (func (export "wasm:opcode:f64x2.le"))
    (func (export "wasm:opcode:f64x2.ge"))
    (func (export "wasm:opcode:v128.not"))
    (func (export "wasm:opcode:v128.and"))
    (func (export "wasm:opcode:v128.andnot"))
    (func (export "wasm:opcode:v128.or"))
    (func (export "wasm:opcode:v128.xor"))
    (func (export "wasm:opcode:v128.bitselect"))
    (func (export "wasm:opcode:v128.anytrue"))
    (func (export "wasm:opcode:i8x16.abs"))
    (func (export "wasm:opcode:i8x16.neg"))
    (func (export "wasm:opcode:i8x16.popcnt"))
    (func (export "wasm:opcode:i8x16.alltrue"))
    (func (export "wasm:opcode:i8x16.bitmask"))
    (func (export "wasm:opcode:i8x16.narrow_i16x8_s"))
    (func (export "wasm:opcode:i8x16.narrow_i16x8_u"))
    (func (export "wasm:opcode:i8x16.shl"))
    (func (export "wasm:opcode:i8x16.shr_s"))
    (func (export "wasm:opcode:i8x16.shr_u"))
    (func (export "wasm:opcode:i8x16.add"))
    (func (export "wasm:opcode:i8x16.add_sat_s"))
    (func (export "wasm:opcode:i8x16.add_sat_u"))
    (func (export "wasm:opcode:i8x16.sub"))
    (func (export "wasm:opcode:i8x16.sub_sat_s"))
    (func (export "wasm:opcode:i8x16.sub_sat_u"))
    (func (export "wasm:opcode:i8x16.min_s"))
    (func (export "wasm:opcode:i8x16.min_u"))
    (func (export "wasm:opcode:i8x16.max_s"))
    (func (export "wasm:opcode:i8x16.max_u"))
    (func (export "wasm:opcode:i8x16.avgr_u"))
    (func (export "wasm:opcode:i16x8.extaddpairwise_i8x16_s"))
    (func (export "wasm:opcode:i16x8.extaddpairwise_i8x16_u"))
    (func (export "wasm:opcode:i16x8.abs"))
    (func (export "wasm:opcode:i16x8.neg"))
    (func (export "wasm:opcode:i16x8.q15mulrsat_s"))
    (func (export "wasm:opcode:i16x8.alltrue"))
    (func (export "wasm:opcode:i16x8.bitmask"))
    (func (export "wasm:opcode:i16x8.narrow_i32x4_s"))
    (func (export "wasm:opcode:i16x8.narrow_i32x4_u"))
    (func (export "wasm:opcode:i16x8.extend_low_i8x16_s"))
    (func (export "wasm:opcode:i16x8.extend_high_i8x16_s"))
    (func (export "wasm:opcode:i16x8.extend_low_i8x16_u"))
    (func (export "wasm:opcode:i16x8.extend_high_i8x16_u"))
    (func (export "wasm:opcode:i16x8.shl"))
    (func (export "wasm:opcode:i16x8.shr_s"))
    (func (export "wasm:opcode:i16x8.shr_u"))
    (func (export "wasm:opcode:i16x8.add"))
    (func (export "wasm:opcode:i16x8.add_sat_s"))
    (func (export "wasm:opcode:i16x8.add_sat_u"))
    (func (export "wasm:opcode:i16x8.sub"))
    (func (export "wasm:opcode:i16x8.sub_sat_s"))
    (func (export "wasm:opcode:i16x8.sub_sat_u"))
    (func (export "wasm:opcode:i16x8.mul"))
    (func (export "wasm:opcode:i16x8.min_s"))
    (func (export "wasm:opcode:i16x8.min_u"))
    (func (export "wasm:opcode:i16x8.max_s"))
    (func (export "wasm:opcode:i16x8.max_u"))
    (func (export "wasm:opcode:i16x8.avgr_u"))
    (func (export "wasm:opcode:i16x8.extmul_low_i8x16_s"))
    (func (export "wasm:opcode:i16x8.extmul_high_i8x16_s"))
    (func (export "wasm:opcode:i16x8.extmul_low_i8x16_u"))
    (func (export "wasm:opcode:i16x8.extmul_high_i8x16_u"))
    (func (export "wasm:opcode:i32x4.extaddpairwise_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extaddpairwise_i16x8_u"))
    (func (export "wasm:opcode:i32x4.abs"))
    (func (export "wasm:opcode:i32x4.neg"))
    (func (export "wasm:opcode:i32x4.alltrue"))
    (func (export "wasm:opcode:i32x4.bitmask"))
    (func (export "wasm:opcode:i32x4.extend_low_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extend_high_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extend_low_i16x8_u"))
    (func (export "wasm:opcode:i32x4.extend_high_i16x8_u"))
    (func (export "wasm:opcode:i32x4.shl"))
    (func (export "wasm:opcode:i32x4.shr_s"))
    (func (export "wasm:opcode:i32x4.shr_u"))
    (func (export "wasm:opcode:i32x4.add"))
    (func (export "wasm:opcode:i32x4.sub"))
    (func (export "wasm:opcode:i32x4.mul"))
    (func (export "wasm:opcode:i32x4.min_s"))
    (func (export "wasm:opcode:i32x4.min_u"))
    (func (export "wasm:opcode:i32x4.max_s"))
    (func (export "wasm:opcode:i32x4.max_u"))
    (func (export "wasm:opcode:i32x4.dot_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extmul_low_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extmul_high_i16x8_s"))
    (func (export "wasm:opcode:i32x4.extmul_low_i16x8_u"))
    (func (export "wasm:opcode:i32x4.extmul_high_i16x8_u"))
    (func (export "wasm:opcode:i64x2.abs"))
    (func (export "wasm:opcode:i64x2.neg"))
    (func (export "wasm:opcode:i64x2.alltrue"))
    (func (export "wasm:opcode:i64x2.bitmask"))
    (func (export "wasm:opcode:i64x2.extend_low_i32x4_s"))
    (func (export "wasm:opcode:i64x2.extend_high_i32x4_s"))
    (func (export "wasm:opcode:i64x2.extend_low_i32x4_u"))
    (func (export "wasm:opcode:i64x2.extend_high_i32x4_u"))
    (func (export "wasm:opcode:i64x2.shl"))
    (func (export "wasm:opcode:i64x2.shr_s"))
    (func (export "wasm:opcode:i64x2.shr_u"))
    (func (export "wasm:opcode:i64x2.add"))
    (func (export "wasm:opcode:i64x2.sub"))
    (func (export "wasm:opcode:i64x2.mul"))
    (func (export "wasm:opcode:i64x2.extmul_low_i32x4_s"))
    (func (export "wasm:opcode:i64x2.extmul_high_i32x4_s"))
    (func (export "wasm:opcode:i64x2.extmul_low_i32x4_u"))
    (func (export "wasm:opcode:i64x2.extmul_high_i32x4_u"))
    (func (export "wasm:opcode:f32x4.ceil"))
    (func (export "wasm:opcode:f32x4.floor"))
    (func (export "wasm:opcode:f32x4.trunc"))
    (func (export "wasm:opcode:f32x4.nearest"))
    (func (export "wasm:opcode:f32x4.abs"))
    (func (export "wasm:opcode:f32x4.neg"))
    (func (export "wasm:opcode:f32x4.sqrt"))
    (func (export "wasm:opcode:f32x4.add"))
    (func (export "wasm:opcode:f32x4.sub"))
    (func (export "wasm:opcode:f32x4.mul"))
    (func (export "wasm:opcode:f32x4.div"))
    (func (export "wasm:opcode:f32x4.min"))
    (func (export "wasm:opcode:f32x4.max"))
    (func (export "wasm:opcode:f32x4.pmin"))
    (func (export "wasm:opcode:f32x4.pmax"))
    (func (export "wasm:opcode:f64x2.ceil"))
    (func (export "wasm:opcode:f64x2.floor"))
    (func (export "wasm:opcode:f64x2.trunc"))
    (func (export "wasm:opcode:f64x2.nearest"))
    (func (export "wasm:opcode:f64x2.abs"))
    (func (export "wasm:opcode:f64x2.neg"))
    (func (export "wasm:opcode:f64x2.sqrt"))
    (func (export "wasm:opcode:f64x2.add"))
    (func (export "wasm:opcode:f64x2.sub"))
    (func (export "wasm:opcode:f64x2.mul"))
    (func (export "wasm:opcode:f64x2.div"))
    (func (export "wasm:opcode:f64x2.min"))
    (func (export "wasm:opcode:f64x2.max"))
    (func (export "wasm:opcode:f64x2.pmin"))
    (func (export "wasm:opcode:f64x2.pmax"))
    (func (export "wasm:opcode:i32x4.trunc_sat_f32x4_s"))
    (func (export "wasm:opcode:i32x4.trunc_sat_f32x4_u"))
    (func (export "wasm:opcode:f32x4.convert_i32x4_s"))
    (func (export "wasm:opcode:f32x4.convert_i32x4_u"))
    (func (export "wasm:opcode:i32x4.trunc_sat_f64x2_s_zero"))
    (func (export "wasm:opcode:i32x4.trunc_sat_f64x2_u_zero"))
    (func (export "wasm:opcode:f64x2.convert_low_i32x4_s"))
    (func (export "wasm:opcode:f64x2.convert_low_i32x4_u"))
    (func (export "wasm:opcode:f32x4.demote_f64x2_zero"))
    (func (export "wasm:opcode:f64x2.promote_low_f32x4"))
    (func (export "wasm:opcode:memory.atomic.notify"))
    (func (export "wasm:opcode:memory.atomic.wait32"))
    (func (export "wasm:opcode:memory.atomic.wait64"))
    (func (export "wasm:opcode:atomic.fence"))
    (func (export "wasm:opcode:i32.atomic.load"))
    (func (export "wasm:opcode:i64.atomic.load"))
    (func (export "wasm:opcode:i32.atomic.load8_u"))
    (func (export "wasm:opcode:i32.atomic.load16_u"))
    (func (export "wasm:opcode:i64.atomic.load8_u"))
    (func (export "wasm:opcode:i64.atomic.load16_u"))
    (func (export "wasm:opcode:i64.atomic.load32_u"))
    (func (export "wasm:opcode:i32.atomic.store"))
    (func (export "wasm:opcode:i64.atomic.store"))
    (func (export "wasm:opcode:i32.atomic.store8"))
    (func (export "wasm:opcode:i32.atomic.store16"))
    (func (export "wasm:opcode:i64.atomic.store8"))
    (func (export "wasm:opcode:i64.atomic.store16"))
    (func (export "wasm:opcode:i64.atomic.store32"))
    (func (export "wasm:opcode:i32.atomic.rmw.add"))
    (func (export "wasm:opcode:i64.atomic.rmw.add"))
    (func (export "wasm:opcode:i32.atomic.rmw8.add_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.add_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.add_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.sub"))
    (func (export "wasm:opcode:i64.atomic.rmw.sub"))
    (func (export "wasm:opcode:i32.atomic.rmw8.sub_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.sub_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.sub_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.and"))
    (func (export "wasm:opcode:i64.atomic.rmw.and"))
    (func (export "wasm:opcode:i32.atomic.rmw8.and_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.and_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.and_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.or"))
    (func (export "wasm:opcode:i64.atomic.rmw.or"))
    (func (export "wasm:opcode:i32.atomic.rmw8.or_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.or_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.or_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.xor"))
    (func (export "wasm:opcode:i64.atomic.rmw.xor"))
    (func (export "wasm:opcode:i32.atomic.rmw8.xor_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.xor_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.xor_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.xchg"))
    (func (export "wasm:opcode:i64.atomic.rmw.xchg"))
    (func (export "wasm:opcode:i32.atomic.rmw8.xchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.xchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.xchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw.cmpxchg"))
    (func (export "wasm:opcode:i64.atomic.rmw.cmpxchg"))
    (func (export "wasm:opcode:i32.atomic.rmw8.cmpxchg_u"))
    (func (export "wasm:opcode:i32.atomic.rmw16.cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw8.cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw16.cmpxchg_u"))
    (func (export "wasm:opcode:i64.atomic.rmw32.cmpxchg_u"))
    (func (export "wasm:opcode:cont.new"))
    (func (export "wasm:opcode:cont.bind"))
    (func (export "wasm:opcode:suspend"))
    (func (export "wasm:opcode:resume"))
    (func (export "wasm:opcode:resume.throw"))
)

(module
    (import "wizeng" "puti" (func $puti (param i32)))
    (import "wizeng" "puts" (func $puts (param i32 i32)))

    (global $const (mut i32) (i32.const 0))
    (global $misc (mut i32) (i32.const 0))
    (global $control (mut i32) (i32.const 0))
    (global $local (mut i32) (i32.const 0))
    (global $global (mut i32) (i32.const 0))
    (global $table (mut i32) (i32.const 0))
    (global $load (mut i32) (i32.const 0))
    (global $store (mut i32) (i32.const 0))
    (global $mem (mut i32) (i32.const 0))
    (global $arith (mut i32) (i32.const 0))
    (global $compare (mut i32) (i32.const 0))
    (global $convert (mut i32) (i32.const 0))
    (global $exn (mut i32) (i32.const 0))
    (global $gc (mut i32) (i32.const 0))
    (global $atomic (mut i32) (i32.const 0))

    (func (export "wasm:exit")
        ;; print header
        (call $puts (i32.const 90) (i32.const 20))

        ;; print compare
        (call $puts (i32.const 0) (i32.const 7)) ;; 'compare'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $compare))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print const
        (call $puts (i32.const 7) (i32.const 5)) ;; 'const'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $const))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print misc
        (call $puts (i32.const 12) (i32.const 4)) ;; 'misc'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $misc))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print control
        (call $puts (i32.const 16) (i32.const 7)) ;; 'control'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $control))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print local
        (call $puts (i32.const 23) (i32.const 5)) ;; 'local'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $local))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print global
        (call $puts (i32.const 28) (i32.const 6)) ;; 'global'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $global))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print table
        (call $puts (i32.const 34) (i32.const 5)) ;; 'table'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $table))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print load
        (call $puts (i32.const 39) (i32.const 4)) ;; 'load'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $load))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print store
        (call $puts (i32.const 43) (i32.const 5)) ;; 'store'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $store))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print mem
        (call $puts (i32.const 48) (i32.const 3)) ;; 'mem'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $mem))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print arith
        (call $puts (i32.const 51) (i32.const 5)) ;; 'arith'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $arith))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print convert
        (call $puts (i32.const 56) (i32.const 7)) ;; 'convert'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $convert))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print exn
        (call $puts (i32.const 63) (i32.const 3)) ;; 'exn'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $exn))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print gc
        (call $puts (i32.const 73) (i32.const 2)) ;; 'gc'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $gc))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'

        ;; print atomic
        (call $puts (i32.const 75) (i32.const 6)) ;; 'atomic'
        (call $puts (i32.const 87) (i32.const 2)) ;; ': '
        (call $puti (global.get $atomic))
        (call $puts (i32.const 89) (i32.const 1)) ;; '\n'
    )

    (func (export "wasm:opcode:unreachable")
        (i32.add (global.get $misc) (i32.const 1))
        (global.set $misc)
    )
    (func (export "wasm:opcode:nop")
        (i32.add (global.get $misc) (i32.const 1))
        (global.set $misc)
    )
    (func (export "wasm:opcode:block")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:loop")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:if")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:else")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:try_table")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:throw")
        (i32.add (global.get $exn) (i32.const 1))
        (global.set $exn)
    )
    (func (export "wasm:opcode:throw_ref")
        (i32.add (global.get $exn) (i32.const 1))
        (global.set $exn)
    )
    (func (export "wasm:opcode:end")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:br")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:br_if")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:br_table")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:return")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:call")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:call_indirect")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:return_call")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:return_call_indirect")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:drop")
        (i32.add (global.get $misc) (i32.const 1))
        (global.set $misc)
    )
    (func (export "wasm:opcode:select")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:typed_select")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:local.get")
        (i32.add (global.get $local) (i32.const 1))
        (global.set $local)
    )
    (func (export "wasm:opcode:local.set")
        (i32.add (global.get $local) (i32.const 1))
        (global.set $local)
    )
    (func (export "wasm:opcode:local.tee")
        (i32.add (global.get $local) (i32.const 1))
        (global.set $local)
    )
    (func (export "wasm:opcode:global.get")
        (i32.add (global.get $global) (i32.const 1))
        (global.set $global)
    )
    (func (export "wasm:opcode:global.set")
        (i32.add (global.get $global) (i32.const 1))
        (global.set $global)
    )
    (func (export "wasm:opcode:i32.load")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:f32.load")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:f64.load")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i32.load8_s")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i32.load8_u")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i32.load16_s")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i32.load16_u")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load8_s")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load8_u")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load16_s")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load16_u")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load32_s")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i64.load32_u")
        (i32.add (global.get $load) (i32.const 1))
        (global.set $load)
    )
    (func (export "wasm:opcode:i32.store")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i64.store")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:f32.store")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:f64.store")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i32.store8")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i32.store16")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i64.store8")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i64.store16")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:i64.store32")
        (i32.add (global.get $store) (i32.const 1))
        (global.set $store)
    )
    (func (export "wasm:opcode:memory.size")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:memory.grow")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:i32.const")
        (i32.add (global.get $const) (i32.const 1))
        (global.set $const)
    )
    (func (export "wasm:opcode:i64.const")
        (i32.add (global.get $const) (i32.const 1))
        (global.set $const)
    )
    (func (export "wasm:opcode:f32.const")
        (i32.add (global.get $const) (i32.const 1))
        (global.set $const)
    )
    (func (export "wasm:opcode:f64.const")
        (i32.add (global.get $const) (i32.const 1))
        (global.set $const)
    )
    (func (export "wasm:opcode:ref.null")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.is_null")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.func")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.eq")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:i32.eqz")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.eq")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.ne")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.lt_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.lt_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.gt_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.gt_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.le_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.le_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.ge_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.ge_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.eqz")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.eq")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.ne")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.lt_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.lt_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.gt_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.gt_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.le_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.le_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.ge_s")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i64.ge_u")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.eq")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.ne")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.lt")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.gt")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.le")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f32.ge")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.eq")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.ne")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.lt")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.gt")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.le")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:f64.ge")
        (i32.add (global.get $compare) (i32.const 1))
        (global.set $compare)
    )
    (func (export "wasm:opcode:i32.clz")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.ctz")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.popcnt")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.add")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.sub")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.mul")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.div_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.div_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.rem_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.rem_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.and")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.or")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.xor")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.shl")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.shr_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.shr_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.rotl")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.rotr")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.clz")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.ctz")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.popcnt")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.add")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.sub")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.mul")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.div_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.div_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.rem_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.rem_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.and")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.or")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.xor")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.shl")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.shr_s")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.shr_u")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.rotl")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i64.rotr")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.abs")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.neg")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.ceil")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.floor")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.trunc")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.nearest")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.sqrt")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.add")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.sub")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.mul")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.div")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.min")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.max")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f32.copysign")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.abs")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.neg")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.ceil")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.floor")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.trunc")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.nearest")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.sqrt")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.add")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.sub")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.mul")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.div")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.min")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.max")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:f64.copysign")
        (i32.add (global.get $arith) (i32.const 1))
        (global.set $arith)
    )
    (func (export "wasm:opcode:i32.wrap_i64")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_f32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_f32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_f64_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_f64_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.extend_i32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.extend_i32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_f32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_f32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.convert_i32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.convert_i32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.convert_i64_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.convert_i64_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.demote_f64")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.convert_i32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.convert_i32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.convert_i64_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.convert_i64_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.promote_f32")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.reinterpret_f32")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.reinterpret_f64")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f32.reinterpret_i32")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:f64.reinterpret_i64")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.extend8_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.extend16_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.extend8_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.extend16_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.extend32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:struct.new")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:struct.new_default")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:struct.get")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:struct.get_s")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:struct.get_u")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:struct.set")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.new")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.new_default")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.new_fixed")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.new_data")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.new_elem")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.get")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.get_s")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.get_u")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.set")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.len")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.fill")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.copy")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.init_data")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:array.init_elem")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.test")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.cast")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:br_on_cast")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:br_on_cast_fail")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:any.convert_extern")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:extern.convert_any")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:ref.i31")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:i31.get_s")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:i31.get_u")
        (i32.add (global.get $gc) (i32.const 1))
        (global.set $gc)
    )
    (func (export "wasm:opcode:i32.trunc_sat_f32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_sat_f32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_sat_f64_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i32.trunc_sat_f64_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_sat_f32_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_sat_f32_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_sat_f64_s")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:i64.trunc_sat_f64_u")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:memory.init")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:memory.copy")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:memory.fill")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:data.drop")
        (i32.add (global.get $mem) (i32.const 1))
        (global.set $mem)
    )
    (func (export "wasm:opcode:elem.drop")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.copy")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.init")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.fill")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.get")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.set")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.grow")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:table.size")
        (i32.add (global.get $table) (i32.const 1))
        (global.set $table)
    )
    (func (export "wasm:opcode:memory.atomic.notify")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:memory.atomic.wait32")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:memory.atomic.wait64")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:atomic.fence")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.load")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.load")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.load8_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.load16_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.load8_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.load16_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.load32_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.store")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.store8")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.store16")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.store")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.store8")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.store16")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.store32")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_add")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_add_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_add_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_add")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_add_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_add_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_add_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_sub")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_sub_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_sub_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_sub")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_sub_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_sub_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_sub_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_and")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_and_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_and_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_and")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_and_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_and_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_and_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_or")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_or_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_or_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_or")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_or_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_or_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_or_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_xor")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_xor_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_xor_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_xor")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_xor_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_xor_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_xor_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_xchg")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_xchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_xchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_xchg")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_xchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_xchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_xchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw_cmpxchg")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw8_cmpxchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i32.atomic.rmw16_cmpxchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw_cmpxchg")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw8_cmpxchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw16_cmpxchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:i64.atomic.rmw32_cmpxchg_u")
        (i32.add (global.get $atomic) (i32.const 1))
        (global.set $atomic)
    )
    (func (export "wasm:opcode:call_ref")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:return_call_ref")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:ref.as_non_null")
        (i32.add (global.get $convert) (i32.const 1))
        (global.set $convert)
    )
    (func (export "wasm:opcode:br_on_null")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )
    (func (export "wasm:opcode:br_on_non_null")
        (i32.add (global.get $control) (i32.const 1))
        (global.set $control)
    )

    (memory (;0;) (export "memory") 1)
    (data (;0;) (i32.const 0) "compare")
    (data (;1;) (i32.const 7) "const")
    (data (;2;) (i32.const 12) "misc")
    (data (;3;) (i32.const 16) "control")
    (data (;4;) (i32.const 23) "local")
    (data (;5;) (i32.const 28) "global")
    (data (;6;) (i32.const 34) "table")
    (data (;7;) (i32.const 39) "load")
    (data (;8;) (i32.const 43) "store")
    (data (;9;) (i32.const 48) "mem")
    (data (;10;) (i32.const 51) "arith")
    (data (;11;) (i32.const 56) "convert")
    (data (;12;) (i32.const 63) "exn")
    (data (;13;) (i32.const 66) "simd")
    (data (;14;) (i32.const 70) "ref")
    (data (;15;) (i32.const 73) "gc")
    (data (;16;) (i32.const 75) "atomic")
    (data (;17;) (i32.const 81) "memory")
    (data (;18;) (i32.const 87) ": ")
    (data (;19;) (i32.const 89) "\0a")
    (data (;20;) (i32.const 90) "\0a===== FLUSH =====\0a")
)
